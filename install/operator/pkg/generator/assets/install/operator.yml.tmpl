- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: syndesis-operator
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: operator
      syndesis.io/component: syndesis-operator
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: syndesis-operator:install
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: operator
      syndesis.io/component: syndesis-operator
  subjects:
  - kind: ServiceAccount
    name: syndesis-operator
  roleRef:
    kind: Role
    name: {{ .Role }}
    apiGroup: rbac.authorization.k8s.io

{{- if .ApiServer.OlmSupport }}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/component: syndesis-operator
      syndesis.io/type: operator
    name: syndesis-operator:install-olm
  subjects:
  - kind: ServiceAccount
    name: syndesis-operator
    namespace: {{ .Namespace }}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: {{ .Role }}-olm
{{- end }}

{{- if .ApiServer.ImageStreams}}
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: operator
      syndesis.io/component: syndesis-operator
    name: syndesis-operator
  spec:
    tags:
    {{if .DevSupport}}
    - name: "latest"
      from:
        name: {{.Image}}:latest
        kind: ImageStreamTag
    {{else}}
    - name: "{{.Tag}}"
      from:
        name: {{.Image}}:{{.Tag}}
        kind: DockerImage
      importPolicy:
        scheduled: true
    {{end}}
{{end}}

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    {{- if .ApiServer.ImageStreams}}
    annotations:
      #
      # Sets a trigger on this deployment to overwrite
      # the template.spec.image property and point to
      # the syndesis-operator image stream.
      #
      # If in dev mode, modify the tag accordingly.
      #
      {{if .DevSupport}}
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"syndesis-operator:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"syndesis-operator\")].image"}]'
      {{else}}
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"syndesis-operator:{{.Tag}}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"syndesis-operator\")].image"}]'
      {{end}}
    {{end}}
    name: syndesis-operator
    labels:
      app: syndesis
      syndesis.io/app: syndesis
      syndesis.io/type: operator
      syndesis.io/component: syndesis-operator
  spec:
    strategy:
      type: Recreate
    replicas: 1
    selector:
      matchLabels:
        syndesis.io/app: syndesis
        syndesis.io/type: operator
        syndesis.io/component: syndesis-operator
    template:
      metadata:
        labels:
          name: syndesis-operator
          syndesis.io/app: syndesis
          syndesis.io/type: operator
          syndesis.io/component: syndesis-operator
      spec:
        serviceAccountName: syndesis-operator
        containers:
        - name: syndesis-operator
          #
          # Image will always start out being set to the release .Image:.Tag pair
          # In kubernetes this would remain the case even when developing
          #  -- Developer provides a registry/image combination for .Image
          # In openshift this would be overwritten by the trigger annotation
          #  -- Developer provides a new image in the associated imagestream
          #
          image: {{.Image}}:{{.Tag}}
        {{- if .DevSupport}}
          imagePullPolicy: Always
        {{else}}
          imagePullPolicy: IfNotPresent
        {{end}}
          ports:
          - containerPort: 60000
            name: metrics
          env:
          - name: WATCH_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OPERATOR_NAME
            value: "syndesis-operator"
          - name: DEV_SUPPORT
            value: "{{.DevSupport}}"
          volumeMounts:
          - name: syndesis-operator-data
            mountPath: /data
        initContainers:
        - command:
          - bash
          - -c
          - "postgres -V > /data/postgresql.txt"
          image: '{{.DatabaseImage}}'
          name: postgres-version
          volumeMounts:
          - name: syndesis-operator-data
            mountPath: /data
        volumes:
        - name: syndesis-operator-data
          emptyDir: {}
