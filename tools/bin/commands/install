#!/bin/bash

install::description() {
    echo "Install Syndesis to a connected OpenShift cluster"
}

install::usage() {
    cat <<"EOT"
-s  --setup                   Install CRDs clusterwide. Use --grant if you want a specific user to be
                              able to install Syndesis. You have to run this option once as cluster admin.
-u  --grant <user>            Add permissions for the given user so that user can install the operator
                              in her projects. Must be run as cluster admin.
    --cluster                 Add the permission for all projects in the cluster
                              (only when used together with --grant)
-p  --project                 Install into this project. Delete this project
                              if it already exists. By default, install into the current project (without deleting)
    --operator-only           Only install the operator but no resource
                              connected cluster.
    --tag <tag>               Syndesis version/tag to install. If not given, then the latest
                              version from master is installed
    --force                   Override an existing "Syndesis" if present
-w  --watch                   Wait until cluster is up
-f  --force-binary-download   By default if the binary cli is present in the expected path, it will
                              be used. With this option enabled, the binary will be removed and downloaded,
                              ensuring it is the latest version
-o  --open                    Open Syndesis in browser when installation is ready (implies --watch)
-y  --yes                     Assume 'yes' automatically when asking for deleting
                              a given project.
    --camel-k <version>       Install camel-k operator version <version>
                              (version is optional)
    --camel-k-options "opts"  Options used when installing the camel-k operator.
                              Use quotes and start with a space before appending the options.
    --maven-mirror            Install Maven Mirror to be used with --maven-mirror when building.
    --custom-resource         Provide a custom resource to be installed by the operator
    --app-options             Operator parameters when installing the app.
                              Use quotes and start with a space before appending the options (example: " --addons jaeger").
EOT
}

#
# Checks where the syndesis-installer role has been grant to the project
#
is_role_granted() {
    local user=$(get_current_user)

    ${KUBE} get rolebinding syndesis-installer-${user} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # Have a role binding for this user so return
        echo "OK"
        return
    fi

    ${KUBE} get clusterrolebinding syndesis-installer-${user} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # Have a cluster role binding for this user so return
        echo "OK"
        return
    fi

    echo "ERROR: The user '${user}' does not have the 'syndesis-installer' role. Please execute '... --grant' as a cluster-admin first."
}

grant_role() {
  local user_to_prepare="$1"
  if [ -z "$user_to_prepare" ]; then
    check_error "ERROR: Cannot perform grant as no user specified"
  fi

  #
  # Check that the user calling --grant is a cluster-admin
  #
  if [ "$(is_cluster_admin)" != "OK" ]; then
    check_error "ERROR: Can only execute --grant as cluster-admin."
  fi

  echo "Grant syndesis-installer role to user $user_to_prepare"

  if [ $(hasflag --cluster) ]; then
      result=$($OPERATOR_BINARY grant --user $user_to_prepare --cluster)
  else
      result=$($OPERATOR_BINARY grant --user $user_to_prepare)
  fi
  check_error "$result"
}

install::init() {
    source "$(basedir)/commands/util/client_funcs"
    source "$(basedir)/commands/util/camel_k_funcs"
    source "$(basedir)/commands/util/operator_funcs"

    #
    # Determine the platform we'll be connecting to
    #
    determine_platform
    check_error "${IS_OPENSHIFT}"

    #
    # Configure client binary
    #
    setup_client_binary
}

install::run() {
    local release_tag="$(readopt --tag)"
    if [[ $(hasflag -f --force-binary-download) ]] || [[ -n "$release_tag" ]] || [[ $(hasflag --full-reset) ]]; then
        if [[ -f ${OPERATOR_BINARY} ]]; then
            rm ${OPERATOR_BINARY}
        fi
    fi
    download_operator_binary || print_error_and_exit "unable to download the operator binary, exit"

    #
    # If a project is given, only a cluster-admin
    # can create it new or recreate it
    #
    local project=$(readopt --project -p)
    if [ -n "${project}" ]; then
        revert_login=$(login_as_admin)
        recreate_namespace $project
    fi

    local prep_only="false"
    if [[ $(hasflag -s --setup) ]]; then
        echo "Installing Syndesis CRD"

        #
        # Need to be a cluster admin for this to happen
        #
        local revert_login=""
        local result=$(is_cluster_admin)
        if [ "$(contains_error "${result}")" == "YES" ]; then
            revert_login=$(login_as_admin)
        fi

        result=$($OPERATOR_BINARY install cluster)
        check_error "$result"
        if [ $(hasflag --camel-k) ]; then
            echo "Installing Camel-K CRDs"
            result=$(install_camel_k_crds "$(readopt --camel-k)")
            check_error "$result"
        fi

        if [ -z ${revert_login} ]; then
            ${revert_login}
        fi

        prep_only="true"
    fi

    local user_to_prepare="$(readopt -u --grant)"
    if [ -n  "$user_to_prepare" ]; then
        echo "Grant permission to create Syndesis to user $user_to_prepare"

        #
        # Need to be a cluster admin for this to happen
        #
        local revert_login=""
        local result=$(is_cluster_admin)
        if [ "$(contains_error "${result}")" == "YES" ]; then
            revert_login=$(login_as_admin)
        fi

        grant_role "${user_to_prepare}"

        if [ -z ${revert_login} ]; then
            ${revert_login}
        fi

        prep_only="true"
    fi

    if $prep_only; then
        return
    fi

    #Check the custom resource if one has been specified
    local customcr=$(readopt --custom-resource)
    if [ -n "${customcr}" ]; then
        if [ ! -f "${customcr}" ]; then
            check_error "ERROR: No custom resource exists at '${customcr}'"
        fi
    fi

    #
    # If a cluster-admin and the role has not yet been granted
    # then ensure it is by granting it to the current user
    #
    curr_user="$(get_current_user)"
    if [ "$(is_role_granted)" != "OK" ]; then
        echo "No syndesis-installer role has been granted so installing now"
        revert_login=$(login_as_admin)
        grant_role "${curr_user}"
        ${revert_login}
    fi

    #
    # Check that user has syndesis-installer role available
    #
    result=$(is_role_granted)
    check_error "$result"

    #
    # Check Syndesis CRD installed
    #
    ${KUBE} get syndesis >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        check_error "ERROR: No CRD Syndesis installed or not enough permissions to read them. Please run --setup and/or --grant as cluster-admin. See 'syndesis install --help' for more information."
    fi

    #
    # If using camel-k, check CRD installed
    #
    if [ $(hasflag --camel-k) ]; then
        ${KUBE} get integration >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            check_error "ERROR: Camel-K installation requested but no Camel-K CRDs accessible. Please run --setup --camel-k to register the proper CRDs."
        fi
    fi
    set -e

    if [ $(hasflag --maven-mirror) ]; then
        create_maven_mirror
    fi


    # Deploy operator and wait until its up
    echo "Deploying Syndesis operator"
    result=$($OPERATOR_BINARY install operator)
    check_error "$result"

    if [ $(hasflag --camel-k) ]; then
        echo "Deploying Camel-K operator"
        result=$(deploy_camel_k_operator "$(readopt --camel-k)" "$(${KUBE} project -q)" "$(readopt --camel-k-options)")
        check_error "$result"
    fi

    wait_for_deployments 1 syndesis-operator

    local app_options=$(readopt --app-options)
    if [ $(hasflag --operator-only) ]; then
        echo "Deployed operator."
        exit 0
    else
        # Deploying syndesis app
        local customcr=$(get_custom_resource $(readopt --custom-resource))
        if [ -n "${customcr}" ]; then
            echo "Deploying syndesis app with custom resource ${customcr}"
            app_options=$app_options" --custom-resource ${customcr}"
        else
            echo "Deploying syndesis app."
        fi

        result=$($OPERATOR_BINARY install app $app_options)
        check_error "$result"
    fi

    echo "Install finished."
    if [ $(hasflag --watch -w) ] || [ $(hasflag --open -o) ]; then
        wait_for_deployments 1 syndesis-server syndesis-ui syndesis-meta
    fi

    if [ $(hasflag --open -o) ]; then
        while ! (${KUBE} get routes | ${GREP} syndesis >/dev/null 2>&1); do
            echo "Sleeping 5s ..."
            sleep 5
        done
        open_url "https://$(${KUBE} get routes syndesis --template "{{.spec.host}}")"
    fi
}
