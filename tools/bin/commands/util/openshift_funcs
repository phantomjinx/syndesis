#!/bin/bash

# Binary for openshift kubectl
OC="oc"

# Minimal version for OC
OC_MIN_VERSION=3.9.0

# Constant for signal to configure oc via minishift
SETUP_MINISHIFT="setup-minishift"

check_oc_version() {
    local minimum=${OC_MIN_VERSION}
    #
    # Removes any lines containing kubernetes or server
    # Extracts any version number of the format dd.dd.dd, eg. 3.10.0 or 4.1.0
    #

    local test=$(${OC} version | ${GREP} -Eiv 'ubernetes|erver' | ${GREP} -o '[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\?')
    if [ -z "${test}" ]; then
        test=$(${OC} version | ${GREP} 'lient' | ${GREP} -o '[0-9]\{1,\}\.[0-9]\{1,\}\.[0-9]\{1,\}\?')
    fi

    if [ -z "$test" ]; then
      echo "ERROR: 'Version of oc could not be found'"
      return
    fi

    echo $(compare_version $test $minimum)
}

get_oc_user() {
    echo $(${OC} whoami)
}

extract_current_token() {
    local token=$(oc whoami -t 2>/dev/null)
    if [ $? == 0 ]; then
        echo $token
    fi
}

login_oc_as_admin() {
    local user=$(oc whoami)
    local token=$(extract_current_token)

    read -p "Please enter the user-name of a cluster-admin account?: " admin_user
    echo
    if [ -z "$admin_user" ]; then
        check_error "Error: No admin account user-name was entered. Aborting."
    fi

    read -p -s "Please enter the password for ${admin_user}?: " password
    echo
    if [ -z "$password" ]; then
        check_error "Error: No password for ${admin_user} was entered. Aborting."
    fi

    # Login in as admin
    local result=$(oc login -u "$admin_user" -p "${password}" 2>&1)
    check_error "$result"

    # Return the command to use to revert to the initial user
    if [ -n "${token}" ]; then
        echo "oc login --token ${token}"
    else
        echo "oc login -u ${user}"
    fi
}

is_minishift_available() {

    check_error $(check_for_command "sed")

    # Check for minishift
    set +e

    if [ $(check_for_command "minishift") != "OK" ]; then
        set -e
        echo "ERROR: 'minishift is not installed so cannot use for 'oc'"
        return
    fi

    local running=$(minishift status | ${GREP} Minishift | sed 's/Minishift:\( \)*//g')
    if [ "$running" != "Running" ]; then
      echo "ERROR: minishift is not running"
      return
    fi

    echo "OK"
}

#
# Download `oc` binary
#
get_oc_bin() {

    local version="v3.11.0"
    local snapshot="${version}-0cbc58b"

    check_error $(check_for_command "curl")
    check_error $(check_for_command "mkdir")
    check_error $(check_for_command "mktemp")
    check_error $(check_for_command "rm")
    check_error $(check_for_command "mv")

    local extract_tool=""
    local ext=""
    local os=""
    if $(isMacOs); then
        check_error $(check_for_command "unzip")
        extract_tool="unzip"
        os="mac"
        ext="zip"
    elif $(isWindows); then
        check_error $(check_for_command "unzip")
        extract_tool="unzip"
        os="windows"
        ext="zip"
    else
        check_error $(check_for_command "tar")
        extract_tool="tar xf"
        os="linux-64bit"
        ext="tar.gz"
    fi

    #
    # If its already downloaded, skip download
    #
    local config_dir=$(syndesis_config_dir)
    [ -d ${config_dir}/bin ] || mkdir -p ${config_dir}/bin

    local oc_command="${config_dir}/bin/${OC}"
    if [ -e ${oc_command} ]; then
        echo ${oc_command}
        return
    fi

    #
    # Download from site
    #
    local oc_dir="openshift-origin-client-tools-${snapshot}-${os}"
    local base_url="https://github.com/openshift/origin/releases/download/$version"
    local download_url="${base_url}/${oc_dir}.${ext}"

    local archive=$(mktemp ${config_dir}/${oc_dir}-XXXX)
    curl -sL --fail -o ${archive} ${download_url} 2>/dev/null || { check_error "ERROR: Could not download ${OC} from ${download_url}"; }

    #
    # Extract binary and move to correct name
    #
    local tmp_dir=$(mktemp -d ${config_dir}/oc-${version}-XXXX)
    pushd ${tmp_dir} >/dev/null

    ${extract_tool} ${archive} >/dev/null 2>&1
    rm ${archive}

    if [ ! -f ./${oc_dir}/${OC} ]; then
        check_error "ERROR: Failed to extract ${OC} to ${tmp_dir}/"
    fi

    mv ./${oc_dir}/${OC} ${oc_command}

    popd >/dev/null

    #
    # Clean up temporary directories
    #
    [ -n "$tmp_dir" ] && [ -d "$tmp_dir" ] && rm -rf $tmp_dir
    echo $oc_command
}

setup_oc() {
    local  __kubevar=$1

    if [ "$(check_for_command ${OC})" == "OK" ]; then
      err=$(check_oc_version)
      check_error $err

      #
      # If a kubevar name was specified then set it
      #
      if [ -n "$__kubevar" ]; then
          eval $__kubevar="${OC}"
      fi

      return
    fi

    #
    # Try downloading oc
    #
    local oc_binary=$(get_oc_bin)
    check_error "${oc_binary}"

    #
    # If a kubevar name was specified then set it
    #
    if [ -n "$__kubevar" ]; then
        eval $__kubevar="${oc_binary}"
    fi
}

setup_minishift_oc() {
   eval $(minishift oc-env)
   echo $(check_oc_version)
}

#
# Same as setup_oc but doesn't exit
# if oc not found
#
is_oc_available() {

    # Check path first if it already exists
    set +e
    which ${OC} &>/dev/null
    if [ $? -eq 0 ]; then
      set -e
      echo $(check_oc_version)
      return
    fi

    #
    # Check for minishift
    #
    # Will return $SETUP_MINISHIFT as the result since
    # this will signal the parent shell should call setup_minishift_oc.
    # This cannot be called here since this will be called from a child
    # shell and so the changes to the PATH variable will not be propogated
    # to the parent shell.
    #
    hasminishift=$(is_minishift_available)
    if [ "$hasminishift" == "OK" ]; then
      set -e
      echo "$SETUP_MINISHIFT"
      return
    fi

    set -e

    # Error, no oc found
    echo "ERROR: No 'oc' binary found in path. Please install the client tools from https://github.com/openshift/origin/releases/tag/v3.9.0 (or newer)"
}

get_oc_project() {
    nm="$1"

    if [ -n "${nm}" ]; then
        echo $(${OC} get project "${nm}" 2>&1)
    else
        echo $(${OC} get project 2>&1)
    fi
}

delete_oc_project() {
    project="${1:-}"
    if [ -z "${project}" ]; then
        check_error "ERROR: No project specified to delete."
    fi

    echo $(${OC} delete project "${project}" 2>&1)
}

create_oc_project() {
    project="${1:-}"
    if [ -z "${project}" ]; then
        check_error "ERROR: No project specified to create."
    fi

    if [ "$(get_oc_project "${project}")" == "OK" ]; then
        check_error "ERROR: Cannot create project. Project exists."
    fi

    echo $(${OC} new-project "${project}" 2>&1)
}

switch_oc_project() {
    project="${1:-}"
    if [ -z "${project}" ]; then
        check_error "ERROR: No project specified."
    fi

    echo $(${OC} project "${project}" 2>&1)
}

# Install maven mirror
install_maven_mirror() {
    local project=$(${OC} project --short=true)
    recreate_namespace "nexus"

    ${OC} new-app sonatype/nexus >/dev/null 2>&1
    ${OC} expose svc/nexus >/dev/null 2>&1

    ${OC} set probe dc/nexus \
        --liveness \
        --failure-threshold 3 \
        --initial-delay-seconds 30 \
        -- echo ok >/dev/null 2>&1
	${OC} set probe dc/nexus \
        --readiness \
        --failure-threshold 3 \
        --initial-delay-seconds 30 \
        --get-url=http://:8081/nexus/content/groups/public >/dev/null 2>&1
    ${OC} set volume dc/nexus --add \
        --name 'nexus-volume-1' \
        --type 'pvc' \
        --mount-path '/sonatype-work/' \
        --claim-name 'nexus-pv' \
        --claim-size '2G' \
        --overwrite >/dev/null 2>&1

    wait_for_deployments 1 nexus

    nexus_host=$(${OC} get routes nexus -o=jsonpath='{.spec.host}')

    echo "Setting up jboss-ea and redhat-ga proxies..."

    curl -X POST \
        http://${nexus_host}/nexus/service/local/repositories \
        -H 'authorization: Basic YWRtaW46YWRtaW4xMjM=' \
        -H 'cache-control: no-cache' \
        -H 'content-type: application/json' \
        -d '{"data":{"repoType":"proxy","id":"jboss-ea","name":"JBoss Early Access","browseable":true,"indexable":true,
        "notFoundCacheTTL":1440,"artifactMaxAge":-1,"metadataMaxAge":1440,"itemMaxAge":1440,"repoPolicy":"RELEASE",
        "provider":"maven2","providerRole":"org.sonatype.nexus.proxy.repository.Repository","downloadRemoteIndexes":true,
        "autoBlockActive":true,"fileTypeValidation":true,"exposed":true,"checksumPolicy":"WARN",
        "remoteStorage":{"remoteStorageUrl":"https://repository.jboss.org/nexus/content/groups/ea/","authentication":null,
        "connectionSettings":null}}}' \
        >/dev/null 2>&1

    curl -X POST \
        http://${nexus_host}/nexus/service/local/repositories \
        -H 'authorization: Basic YWRtaW46YWRtaW4xMjM=' \
        -H 'cache-control: no-cache' \
        -H 'content-type: application/json' \
        -d '{"data":{"repoType":"proxy","id":"redhat-ga","name":"Red Hat General Availability Repository","browseable":true,"indexable":true,
        "notFoundCacheTTL":1440,"artifactMaxAge":-1,"metadataMaxAge":1440,"itemMaxAge":1440,"repoPolicy":"RELEASE",
        "provider":"maven2","providerRole":"org.sonatype.nexus.proxy.repository.Repository","downloadRemoteIndexes":true,
        "autoBlockActive":true,"fileTypeValidation":true,"exposed":true,"checksumPolicy":"WARN",
        "remoteStorage":{"remoteStorageUrl":"https://maven.repository.redhat.com/ga/","authentication":null,
        "connectionSettings":null}}}' \
        >/dev/null 2>&1

    curl -X POST \
        http://${nexus_host}/nexus/service/local/repositories \
        -H 'authorization: Basic YWRtaW46YWRtaW4xMjM=' \
        -H 'cache-control: no-cache' \
        -H 'content-type: application/json' \
        -d '{"data":{"repoType":"proxy","id":"atlassian-public","name":"Atlassian Public","browseable":true,"indexable":true,
        "notFoundCacheTTL":1440,"artifactMaxAge":-1,"metadataMaxAge":1440,"itemMaxAge":1440,"repoPolicy":"RELEASE",
        "provider":"maven2","providerRole":"org.sonatype.nexus.proxy.repository.Repository","downloadRemoteIndexes":true,
        "autoBlockActive":true,"fileTypeValidation":true,"exposed":true,"checksumPolicy":"WARN",
        "remoteStorage":{"remoteStorageUrl":"https://packages.atlassian.com/maven-external","authentication":null,
        "connectionSettings":null}}}' \
        >/dev/null 2>&1

    curl -X PUT \
        http://${nexus_host}/nexus/service/local/repo_groups/public \
        -H 'authorization: Basic YWRtaW46YWRtaW4xMjM=' \
        -H 'cache-control: no-cache' \
        -H 'content-type: application/json' \
        -H 'postman-token: eaa6b07c-87ac-53c5-1ab6-aa585ae9ee3c' \
        -d '{"data":{"id":"public","name":"Public Repositories","format":"maven2","exposed":true,"provider":"maven2",
        "repositories":[{"id":"releases"},{"id":"snapshots"},{"id":"thirdparty"},{"id":"central"},{"id":"jboss-ea"},
        {"id":"redhat-ga"},{"id":"atlassian-public"}]}}' \
        >/dev/null 2>&1

    ${OC} project "${project}"

    echo "Optionally set MAVEN_MIRROR_URL with:"
    echo "export MAVEN_MIRROR_URL=\"http://${nexus_host}/nexus/content/groups/public/\""
}

# Determine maven mirror url
maven_mirror_url() {
    local maven_mirror="${MAVEN_MIRROR_URL:-unknown}"
    if [ "${maven_mirror}" == "unknown" ]; then
        project=$(${OC} project --short=true)
        if ${OC} get project "nexus" >/dev/null 2>&1 ; then
            ${OC} project "nexus" >/dev/null 2>&1
            nexus_host=$(${OC} get routes nexus -o=jsonpath='{.spec.host}')
            ${OC} project "${project}" >/dev/null 2>&1
            echo "http://${nexus_host}/nexus/content/groups/public/"
            return
        fi
        echo "ERROR: Could not automatically determine MAVEN_MIRROR_URL, please make sure you run "
        echo "'syndesis crc --install --maven-mirror' or 'syndesis dev --install-maven-mirror' or setup maven nexus project manually."
        return
    fi
    echo "${maven_mirror}"
}

create_openshift_resource() {
    create_or_delete_openshift_resource "create" "${1:-}" "${2:-}"
}

delete_openshift_resource() {
    create_or_delete_openshift_resource "delete --ignore-not-found" "${1:-}" "${2:-}"
}

create_or_delete_openshift_resource() {
    local what=${1}
    local resource=${2:-}
    local parameters=${3:-}
    local tag="$(readopt --tag)"
    local use_local_resource="$(hasflag --local)"

    local result

    set +e
    if [ -n "$use_local_resource" ]; then
        local template="tee"
        if [ -n "$parameters" ]; then
          template="${OC} process -f - -p $parameters"
        fi

        if [ -n "$tag" ]; then
            pushd $(appdir) >/dev/null
            git fetch --tags
            result=$(git show $tag:${resource} | $template | ${OC} $what -f - >$ERROR_FILE 2>&1)
            if [ $? -ne 0 ]; then
                echo "ERROR: Cannot create $resource (tag: $tag)"
            fi
            popd >/dev/null
        else
            result=$(cat $(appdir)/../$resource | $template | ${OC} $what -f - >$ERROR_FILE 2>&1)
            if [ $? -ne 0 ]; then
                echo "ERROR: Cannot create local $(appdir)/../$resource"
            fi
        fi
    else
        local url="https://raw.githubusercontent.com/syndesisio/syndesis/${tag:-master}/${resource}"

        if [ -z "$parameters" ]; then
            result=$(${OC} $what -f $url >$ERROR_FILE 2>&1)
        else
            result=$(${OC} process -f $url -p $parameters | ${OC} $what -f - >$ERROR_FILE 2>&1)
        fi
        if [ $? -ne 0 ]; then
            echo "ERROR: Cannot create remote resource $url"
        fi
    fi
    set -e
}

get_route() {
  local name="${1}"
  ${OC} get route $name -o jsonpath="{.spec.host}"
}

syndesis_deployments() {
  ${OC} get dc -l syndesis.io/app=syndesis -o name | sed -e "s/^deploymentconfigs\///"
}
